sintassi C++
include <iostream.h>
main()
cout<<"gufgw">>endl
VARIABILI
short int (numero)
float=valore con virgola
long int
char  =valore singolo
double
unsigned (solo numero positivo)
o signed (da negativo a positivo)


SIZEOF(nomevariabile) dice i byte usati per memorizzare la variabile

DICHIARARE VALORE VARIABILE
1)
unsigned short int lunghezza;(variabile)
unisgned short int larghezza;(variabile2)
lunghezza=6;
larghezza=8;
2)
unsigned short int lunghezza=9;larghezza=11;

3)
typedef unsigned short int USHORT;
USHORT lunghezza=4;larghezza=8;

DEFINIRE LE COSTANTI(i dati a differenza delle variabili non cambiano mai ma vengono storate in memoria)
#define studentforclass 11 

creare un "gruppo" di costanti
enum colori {ROSSO,GLIALLO,VERDE,NERO,BIANCO}
ROSSO è una costante simbolica che vale 0(la sua posizione nel gruppo è 0 essendo il primo termine)
mentre GIALLO vale 1(dopo 0)

STATEMENTS
controlla la secuenza di un'espressione o non fa nulla
tutti li statement finiscono con il ;

OPERATORI
assegnamento 
x=10;(uguale)
x=e+1(aggiunge 1)-->oppure e++(aggiunge in automatico 1)
x=e-1(diminuisce di 1) -->oppure e--(diminuisce di 1)

OPERATORI RELAZIONALI
1.0=false
2.tutto il resto=vero
3.==compara 2 variabili
4.>,>=,<,<=,!=(operatori comparatori)

il blocco IF
sintassi:
if (espressione) statement;
oppure
if(espressione)       se l'espressione non è corretta va
{                     alla prossima espressione
statements;
}

USO DI ELSE
if(espressione) statement;  se l'espressione non fa quello 
ELSE statements;            else fai quell'altro

IF CONCATENATI
(gli spazi nel c++ non cambiano nulla)
if (espressione1)
{
if(espresssione2)
    statement1;
else
{
   if)espressione3)
   statement2;
else
statement3;
 }
}
else
   statement4;
(CICLO DI IF INTERNI)

operatore (?)
sintassi:
(espressione1) ? (espressione2) : (espressione3)

se l'espressione 1 è vera ritorna all'espressione 2
se non è vera ritorna all'espressione 3

FUNZIONI
UNA FUNZIONE È UN SOTTOPROGRAMMA CHE TIRA UN VALORE
LA FUNZIONE DI OGNI PROGRAMMA È main().
ogni funzione può chiamarle altre basta che siano specificate in include

DICHIARARE UNA FUNZIONE:
#include

DEFINIZIONI DI FUNZIONI

FUNZIONE PROTOTIPO: è uno statement(;)
DEFINIZIONE DI FUNZIONE:consiste in un header e nel corpo della funzione stessa
HEADER=prototipo che deve avere un nome e non ci sono (;)
ES:
Long Area(long I,long h)
{
    return I*h
}

VARIABILI LOCALI E GLOBALI
locale=variabile definita dentro una funzione(blocco) e visibile solo dentro di essa.
(vale solo all'interno delle parentesi graffe)
globale=definite fuori da ogni funzione e visibili da ogni funzione nel programma.


FUNZIONI OVERLOADING O POLIMORFISMO
sono funzioni con  stesso nome ma differente lista di parametri in input

ES:
funzione che raddoppia ogni tuo input
int Double(int);
float Double(float);
double Double(double);

CLASSI NEL C++

NEL C++ PUOI CREARE NUOVI TIPI DI VARIABILE
con:
Def:classe == set di variabili combinate da un set di relative funzioni che agiscono sulle variabili e le caratterizzano.
in una classe puoi incapsulare più variabili
USO DELLE CLASSI:CREAZIONE DI UN TIPO
<>SE UNA CLASSE ESISTE GIÀ NON LA RICREARE:MODIFICALA

PER DICHIARARE UNA CLASSE SI USA LA PAROLA "class"
es.
class tumadre
{ unsigned int peso;

 unsigned int eta;
 meow();
};
Questa instruzione dice al compilatore cosa e’ un gatto quali dati
contiene e cosa fa (meow()) ma NON ALLOCA MEMORIA per il
gatto che e’ un tipo come un intero o un float.


USARE LE CLASSI PER LA CREAZIONE DI UN OGGETTO
int peso;
cat Frisky; */Frisky è un oggetto di tipo gatto e impiegherà memoria per fare meow() /*
quindi la memoria ora viene allocata a Frisky

un oggetto è una istanza di una classe
mentre la classe è solo un idea(la memoria non viene allocata nella classe)

Per accedere ai membri della classe o ai metodi usi:( . )
Frisky.peso=50;
Friscky.Meow() eseguira’ la funzione Meow()

CLASSI PUBBLICHE E CLASSI PRIVATE

di default tutti i membri di una classe sono privati
(non si possono vedere)
mentre public sono quando si possono vedere i membri








es:

#include <iostream.h>
class Car
{
public:
//metodi pubblici
void Start();
void accelerate();
void setYear(int Year);
//dichiarazione della classe Car
int GetYear();
private:
int theYear;
//variabili private
char Model[255];
};
Car BMW530;
Int immatricolazione;
BMW530.SetYear(i99);
immatricolazione=BMW530.getYear();


COSTRUTTORI E DISTRUTTORI

sono metodi particolari

int anno; e poi anno=99; // per le variabili normali
oppure int anno=99;
metodi uguali

Stessa cosa la puoi immaginare per le classi.L’inizializzazione combina la
dichiarazione e l’assegnazione di valori di default usando speciali metodi
che NON ritornano valori ma che prendono parametri con cui settare I
membri all’inizio.

Il costruttore per la classe Car si definira’:
Class Car
{
public:
Car(int initialAge);
~Car(); //Metodo distruttore:ogni volta che dichiari un costruttore
int GetYear(); i
nt SetYear(int anno);
private:
int TheYear;
};

IMPLEMENTAZIONE DI UN METODO
Una funzione accessoria e’ un interfaccia fra I dati privati di un
oggetto e il resto del mondo.
I METODI COME IN OGNI FUNZIONE SONO IMPLEMENTATI SOLO DOPO ESSERE DICHIARATI
Ogni definizione di una funzione membro avviene con la sintassi:
tipo Classe-tipo::nome metodo { azione;}

UNA CLASSE SI DIVIDE IN 2 PARTI:
1)dichiarazione
2)implementazione

CLASSI CON ALTRE CLASSI COME MEMBRI
classi complesse possono usare come membri classi più semplici

LOOP IN C++
goto "label name"(in genere il nome della label è un loop per non perdere il significato)


WHILE
SINTASSI:
while(condizione){

}
fintanto la condizione è vera verrà rieseguita nel blocco {}

CONTINUE E BREAK
se vuoi creare un loop interno al blocco while prima che finisca usi continue.
se vuoi uscire dal blocco prima che sia finita l'operazione usi break


Do {..}while; //esegue while almeno una volta
es.
Int main(){
int counter=0;
do
{
counter++;
cout<<counter;
} while(counter<5); /anche se scrivevo <0 scriveva almeno una volta/
return 0;}


ALTRE OPERAZIONI DI LOOPING
for(inizializzazione;condizione;incremento){..}
for combina 3 passi in un solo punto

PER EVITARE I LOOP TROPPO INCATENATI TRA DI LORO SI USA switch
SINTASSI:
switch (espressione)
{
}

I PUNTATORI
per conoscere l'indirizzo (interno nel pc)di una variabile si usa
cout<<&var; //scrivera’ qualcosa tipo 0x8fc9:fff4





REFERENZE NEL C++
le referenze combinano parzialmente il potere dell’uso dei puntatori con una sintassi più facile.

SINTASSI:




int someInt;
int &rSomeRef= someInt; //sempre inizializzare un referenza
Leggi come: rSomeRef e’ una referenza ad un intero che e’ inizializzato con la variabile someInt.
















